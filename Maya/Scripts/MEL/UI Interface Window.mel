/*
window;//all following commands assumed to be children of this window unless you use a command like setparent
columnLayout;//same with this layout; all windows REQUIRE some kind of layout command or else they will not work
button;
button;
intField;
rowLayout -numberOfColumns 3; //this is a new parent with following children
button;
textField; 
button;

setParent ..; //sets parent up a parent level
//setParent |; sets parent to top window, setParent "windowNameHere"; sets parent to item with that name
intField; //this is now a child of the column layout because of the setParent ..; command

showWindow;//window is invisible until you show it with this command
*/

global proc Add() //random function for the ui below
{
    string $field1 = `optionVar -q "firstField"`;
    string $field2 = `optionVar -q "secondField"`;
    string $field3 = `optionVar -q "thirdField"`;
    string $field4 = `optionVar -q "textField"`;

    float $value1 = `floatField -q -value $field1`;
    float $value2 = `floatField -q -value $field2`;

    float $sum = $value1 + $value2;

    floatField -edit -value $sum $field3; //remember to specify which obj you're editing 
    textField -e -text("The sum is " + $sum + ".") $field4;
}

global proc GrabFloatValue()
{
    // print(`floatField -q -value "float"`);
    string $value1 = `optionVar -q "firstField"`;
    print($value1 + "\n"); //doesn't grab value

    print(`floatField -q -value $value1`); //does grab value
}

string $mainWindow = "my_window";
if(`window -exists $mainWindow`) //returns true or fasle as a check if that window exists
{
    deleteUI $mainWindow;
} 

$mainWindow = `window -height 300/*pixels*/ 
                    //don't need to indent, it's just easier to read what parameters you're giving your window
                     -title "WINDOW!!!"
                     -sizeable 1
                     -width 400
                     //"my_window"; //the string at the end give the window a name (different from the title, the name is not seen)
                    $mainWindow`; //in this case, we'll just use the string from itself
string $mainColumn = `columnLayout -adjustableColumn 1`;
button -l "button! yay!" -p $mainColumn; //use -p (parent) to specifiy the exact parent of this object
//but you don't need to store every UI element...only store what you need to access later

button -enable off -label "don't touch me.";
button -label "click me" -command "print(\"Hello there my dude\")"; //-command runs a function
//button -l "add numbers" -command Add; //weirdly, you don't put the paratheses when calling functions here
//side note, you MUST declare the function before calling it here--and it must be a global function!

rowLayout -nc 4;

// floatField "float"; //fyi this command returns a string instead of the float

//option variables are like super global variables--they persist in memory
//in this case, they are creating floatFields accessible in UI window
//option variables 
optionVar -stringValue "firstField" `floatField`; 
optionVar -stringValue "secondField" `floatField`; 
optionVar -stringValue "thirdField" `floatField -parent $mainColumn -editable 0`;
optionVar -stringValue "textField" `textField -parent $mainColumn -editable 0`;  

button -p $mainColumn -l "add numbers" -command Add;
showWindow $mainWindow;
//http://help.autodesk.com/cloudhelp/2017/ENU/Maya-Tech-Docs/Commands

